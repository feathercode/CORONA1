lastdate= tail(df0$Date,1)
lastdaterep= tail(df0$dateRep,1)
dfappend= setNames(data.frame(matrix(0,ncol=ncol(df0),nrow=npad)),names(df0))
dfappend$Date= seq.Date(lastdate+1,to=lastdate+npad,by=1)
dfappend$dateRep= seq.Date(lastdaterep+1,to=lastdaterep+npad,by=1)
dfappend$Country= input$setcountry
df0= rbind(df0,dfappend)
lastdaterep
lastdaterep= tail(df0$dateRep,1)
lastdaterep
lastdaterep= tail(dateRep,1)
tail(dateRep,1)
z=tail(dateRep,1)
z
z=tail(dateRep,1)[1,]
z=tail(dateRep,1)[1,1]
tail(dateRep,1)
tail(Date,1)
tail(as.Date(dateRep),1)
lastdate= tail(Date,1)
lastdaterep= tail(as.Date(dateRep),1)
dfappend= setNames(data.frame(matrix(0,ncol=ncol(df0),nrow=npad)),names(df0))
dfappend$Date= seq.Date(lastdate+1,to=lastdate+npad,by=1)
dfappend$dateRep= seq.Date(lastdaterep+1,to=lastdaterep+npad,by=1)
dfappend$Country= input$setcountry
df0= rbind(df0,dfappend)
lastdate= tail(Date,1)
lastdaterep= tail(as.Date(dateRep),1)
dfappend= setNames(data.frame(matrix(0,ncol=ncol(df0),nrow=npad)),names(df0))
dfappend$Date= seq.Date(lastdate+1,to=lastdate+npad,by=1)
dfappend$dateRep= seq.Date(lastdaterep+1,to=lastdaterep+npad,by=1)
dfappend$Country= setcountry
df0= rbind(df0,dfappend)
z= maxdays
dfappend= setNames(data.frame(matrix(0,ncol=ncol(df0),nrow=npad)),names(df0))
dfappend$Date= seq.Date(lastdate+1,to=lastdate+npad,by=1)
dfappend$dateRep= seq.Date(lastdaterep+1,to=lastdaterep+npad,by=1)
dfappend$Country= setcountry
rbind(df0,dfappend)
df0= subset(df1,Country==setcountry)
df0= df0[order(df0$Date),]
df0$Weekday= weekdays(as.POSIXct(df0$Date))
df0$CasesFiltered= bwfilter(as.numeric(df0$Cases), f=7, n=3, bandpass=F, from=.5)
df0$DeathsFiltered= bwfilter(as.numeric(df0$Deaths), f=7, n=3, bandpass=F, from=.5)
df0$CasesSum= cumsum(df0$Cases)
df0$DeathsSum= cumsum(df0$Deaths)
df0= subset(df0,DeathsSum>=min)
npad= maxdays-nrow(df0)
z=nrow(df0)
if(npad>0) {
lastdate= tail(Date,1)
lastdaterep= tail(as.Date(dateRep),1)
dfappend= setNames(data.frame(matrix(0,ncol=ncol(df0),nrow=npad)),names(df0))
dfappend$Date= seq.Date(lastdate+1,to=lastdate+npad,by=1)
dfappend$dateRep= seq.Date(lastdaterep+1,to=lastdaterep+npad,by=1)
dfappend$Country= setcountry
df0= rbind(df0,dfappend)
z= maxdays
}
df0
dfappend$dateRep= seq.Date(lastdaterep+1,to=lastdaterep+npad,by=1)
dfappend
df0= subset(df1,Country==setcountry)
df0= df0[order(df0$Date),]
df0$Weekday= weekdays(as.POSIXct(df0$Date))
df0$CasesFiltered= bwfilter(as.numeric(df0$Cases), f=7, n=3, bandpass=F, from=.5)
df0$DeathsFiltered= bwfilter(as.numeric(df0$Deaths), f=7, n=3, bandpass=F, from=.5)
df0$CasesSum= cumsum(df0$Cases)
df0$DeathsSum= cumsum(df0$Deaths)
df0= subset(df0,DeathsSum>=min)
npad= maxdays-nrow(df0)
z=nrow(df0)
if(npad>0) {
lastdate= tail(Date,1)
lastdaterep= tail(dateRep,1)
dfappend= setNames(data.frame(matrix(0,ncol=ncol(df0),nrow=npad)),names(df0))
dfappend$Date= seq.Date(lastdate+1,to=lastdate+npad,by=1)
dfappend$dateRep= seq.Date(lastdaterep+1,to=lastdaterep+npad,by=1)
dfappend$Country= setcountry
df0= rbind(df0,dfappend)
z= maxdays
}
df0= subset(df0,select= c(Country,dateRep,Date,Cases,Deaths))
# now add a day-count and return the dataset, restricted by day=-count
df0$dayCount= 1:z
tail(df0)
dfappend$dateRep= seq.Date(lastdaterep+1,to=lastdaterep+npad,by=1)
str(df0)
str(dfappend)
min= as.numeric(setmindeath)
maxdays= as.numeric(7*setmaxweeks)
df0= subset(df1,Country==setcountry)
df0= df0[order(df0$Date),]
df0$Weekday= weekdays(as.POSIXct(df0$Date))
df0$CasesFiltered= bwfilter(as.numeric(df0$Cases), f=7, n=3, bandpass=F, from=.5)
df0$DeathsFiltered= bwfilter(as.numeric(df0$Deaths), f=7, n=3, bandpass=F, from=.5)
df0$CasesSum= cumsum(df0$Cases)
df0$DeathsSum= cumsum(df0$Deaths)
df0= subset(df0,DeathsSum>=min)
npad= maxdays-nrow(df0)
z=nrow(df0)
if(npad>0) {
lastdate= tail(Date,1)
lastdaterep= tail(dateRep,1)
dfappend= setNames(data.frame(matrix(0,ncol=ncol(df0),nrow=npad)),names(df0))
dfappend$Date= seq.Date(lastdate+1,to=lastdate+npad,by=1)
dfappend$dateRep= as.factor(lastdaterep)
dfappend$Country= setcountry
df0= rbind(df0,dfappend)
z= maxdays
}
df0= subset(df0,select= c(Country,dateRep,Date,Cases,Deaths))
# now add a day-count and return the dataset, restricted by day=-count
df0$dayCount= 1:z
tail(df0)
runApp()
shiny::runApp()
runApp()
seturl="data_20200518.csv"
df1 <- read.csv(seturl, na.strings = "", fileEncoding = "UTF-8-BOM")
names(df1)[names(df1)=="deaths"] <- "Deaths"
names(df1)[names(df1)=="cases"] <- "Cases"
names(df1)[names(df1)=="countriesAndTerritories"] <- "Country"
df1$Date= as.Date(paste(df1$year,df1$month,df1$day,sep="-"))
df1= subset(df1,select= c(Country,dateRep,Date,Cases,Deaths))
setcountry="United_Kingdom"
setmaxweeks=11
setmindeath=1
min= as.numeric(setmindeath)
maxdays= as.numeric(7*setmaxweeks)
df0= subset(df1,Country==setcountry)
df0= df0[order(df0$Date),]
df0$Weekday= weekdays(as.POSIXct(df0$Date))
df0$CasesFiltered= bwfilter(as.numeric(df0$Cases), f=7, n=3, bandpass=F, from=.5)
df0$DeathsFiltered= bwfilter(as.numeric(df0$Deaths), f=7, n=3, bandpass=F, from=.5)
df0$CasesSum= cumsum(df0$Cases)
df0$DeathsSum= cumsum(df0$Deaths)
df0= subset(df0,DeathsSum>=min)
npad= maxdays-nrow(df0)
z=nrow(df0)
if(npad>0) {
lastdate= tail(Date,1)
lastdaterep= tail(dateRep,1)
dfappend= setNames(data.frame(matrix(0,ncol=ncol(df0),nrow=npad)),names(df0))
dfappend$Date= seq.Date(lastdate+1,to=lastdate+npad,by=1)
dfappend$dateRep= as.factor(lastdaterep)
dfappend$Country= setcountry
df0= rbind(df0,dfappend)
z= maxdays
}
df0= subset(df0,select= c(Country,dateRep,Date,Cases,Deaths))
# now add a day-count and return the dataset, restricted by day=-count
df0$dayCount= 1:z
tail(df0)
seturl="data_20200518.csv"
df1 <- read.csv(seturl, na.strings = "", fileEncoding = "UTF-8-BOM")
names(df1)[names(df1)=="deaths"] <- "Deaths"
names(df1)[names(df1)=="cases"] <- "Cases"
names(df1)[names(df1)=="countriesAndTerritories"] <- "Country"
df1$Date= as.Date(paste(df1$year,df1$month,df1$day,sep="-"))
df1= subset(df1,select= c(Country,dateRep,Date,Cases,Deaths))
setcountry="United_Kingdom"
setmaxweeks=11
setmindeath=10
min= as.numeric(setmindeath)
maxdays= as.numeric(7*setmaxweeks)
df0= subset(df1,Country==setcountry)
df0= df0[order(df0$Date),]
df0$Weekday= weekdays(as.POSIXct(df0$Date))
df0$CasesFiltered= bwfilter(as.numeric(df0$Cases), f=7, n=3, bandpass=F, from=.5)
df0$DeathsFiltered= bwfilter(as.numeric(df0$Deaths), f=7, n=3, bandpass=F, from=.5)
df0$CasesSum= cumsum(df0$Cases)
df0$DeathsSum= cumsum(df0$Deaths)
df0= subset(df0,DeathsSum>=min)
npad= maxdays-nrow(df0)
z=nrow(df0)
if(npad>0) {
lastdate= tail(Date,1)
lastdaterep= tail(dateRep,1)
dfappend= setNames(data.frame(matrix(0,ncol=ncol(df0),nrow=npad)),names(df0))
dfappend$Date= seq.Date(lastdate+1,to=lastdate+npad,by=1)
dfappend$dateRep= as.factor(lastdaterep)
dfappend$Country= setcountry
df0= rbind(df0,dfappend)
z= maxdays
}
df0= subset(df0,select= c(Country,dateRep,Date,Cases,Deaths))
# now add a day-count and return the dataset, restricted by day=-count
df0$dayCount= 1:z
tail(df0)
runApp()
library(seewave)
library(ggplot2)
library(viridis)
library(gridExtra)
seturl="https://opendata.ecdc.europa.eu/covid19/casedistribution/csv"
seturl="data_20200518.csv"
df0 <- {
dfx <- read.csv(input$seturl, na.strings = "", fileEncoding = "UTF-8-BOM")
if (!is.data.frame(dfx)) { validate(paste0("'", input$dataset, "' is not a data frame"))}
names(dfx)[names(dfx)=="deaths"] <- "Deaths"
names(dfx)[names(dfx)=="cases"] <- "Cases"
names(dfx)[names(dfx)=="countriesAndTerritories"] <- "Country"
dfx$Date= as.Date(paste(dfx$year,dfx$month,dfx$day,sep="-"))
subset(dfx,select= c(Country,dateRep,Date,Cases,Deaths))
}
df0
str(df0)
head(df0)
df0 <- {
dfx <- read.csv(input$seturl, na.strings = "", fileEncoding = "UTF-8-BOM")
if (!is.data.frame(dfx)) { validate(paste0("'", input$dataset, "' is not a data frame"))}
names(dfx)[names(dfx)=="deaths"] <- "Deaths"
names(dfx)[names(dfx)=="cases"] <- "Cases"
names(dfx)[names(dfx)=="countriesAndTerritories"] <- "Country"
dfx$dateRep= as.Date(dfx$dateRep)
dfx$Date= as.Date(paste(dfx$year,dfx$month,dfx$day,sep="-"))
subset(dfx,select= c(Country,dateRep,Date,Cases,Deaths))
}
head(df0)
str(df0)
as.Date(dfx$dateRep)
dfx <- read.csv(input$seturl, na.strings = "", fileEncoding = "UTF-8-BOM")
if (!is.data.frame(dfx)) { validate(paste0("'", input$dataset, "' is not a data frame"))}
names(dfx)[names(dfx)=="deaths"] <- "Deaths"
names(dfx)[names(dfx)=="cases"] <- "Cases"
names(dfx)[names(dfx)=="countriesAndTerritories"] <- "Country"
dfx$dateRep= as.Date(dfx$dateRep)
dfx$Date= as.Date(paste(dfx$year,dfx$month,dfx$day,sep="-"))
dfx <- read.csv(input$seturl, na.strings = "", fileEncoding = "UTF-8-BOM")
if (!is.data.frame(dfx)) { validate(paste0("'", input$dataset, "' is not a data frame"))}
dfx <- read.csv(input$seturl, na.strings = "", fileEncoding = "UTF-8-BOM")
df0 <- {
dfx <- read.csv(seturl, na.strings = "", fileEncoding = "UTF-8-BOM")
if (!is.data.frame(dfx)) { validate(paste0("'", input$dataset, "' is not a data frame"))}
names(dfx)[names(dfx)=="deaths"] <- "Deaths"
names(dfx)[names(dfx)=="cases"] <- "Cases"
names(dfx)[names(dfx)=="countriesAndTerritories"] <- "Country"
dfx$dateRep= as.Date(dfx$dateRep)
dfx$Date= as.Date(paste(dfx$year,dfx$month,dfx$day,sep="-"))
subset(dfx,select= c(Country,dateRep,Date,Cases,Deaths))
}
head(df0)
str(df0)
setcountry="United_Kingdom"
setmaxweeks=11
setmindeath=10
df1 <- {
min= as.numeric(setmindeath)
maxdays= as.numeric(7*setmaxweeks)
dfx= subset(df0,Country==setcountry1)
dfx= dfx[order(dfx$Date),]
dfx$Weekday= weekdays(as.POSIXct(dfx$Date))
dfx$CasesFiltered= bwfilter(as.numeric(dfx$Cases), f=7, n=3, bandpass=F, from=.5)
dfx$DeathsFiltered= bwfilter(as.numeric(dfx$Deaths), f=7, n=3, bandpass=F, from=.5)
dfx$CasesSum= cumsum(dfx$Cases)
dfx$DeathsSum= cumsum(dfx$Deaths)
# use cumulative-deaths to restrict the dataset
dfx= subset(dfx,DeathsSum>=min)
npad= maxdays-nrow(dfx)
z=nrow(dfx)
# if necessary, build dataframe to expand dfx to fill the day-count - then bind it to dfx
if(npad>0) {
lastdate= tail(Date,1)
lastdaterep= tail(dateRep,1)
dfappend= setNames(data.frame(matrix(0,ncol=ncol(dfx),nrow=npad)),names(dfx))
dfappend$Date= seq.Date(lastdate+1,to=lastdate+npad,by=1)
dfappend$dateRep= as.factor(lastdaterep)
dfappend$Country= setcountry1
dfx= rbind(dfx,dfappend)
z= maxdays
}
# now add a day-count and return the dataset, restricted by day=-count
dfx$dayCount= 1:z
subset(dfx,dayCount<=maxdays)
}
setcountry1="United_Kingdom"
setmaxweeks=11
setmindeath=10
df1 <- {
min= as.numeric(setmindeath)
maxdays= as.numeric(7*setmaxweeks)
dfx= subset(df0,Country==setcountry1)
dfx= dfx[order(dfx$Date),]
dfx$Weekday= weekdays(as.POSIXct(dfx$Date))
dfx$CasesFiltered= bwfilter(as.numeric(dfx$Cases), f=7, n=3, bandpass=F, from=.5)
dfx$DeathsFiltered= bwfilter(as.numeric(dfx$Deaths), f=7, n=3, bandpass=F, from=.5)
dfx$CasesSum= cumsum(dfx$Cases)
dfx$DeathsSum= cumsum(dfx$Deaths)
# use cumulative-deaths to restrict the dataset
dfx= subset(dfx,DeathsSum>=min)
npad= maxdays-nrow(dfx)
z=nrow(dfx)
# if necessary, build dataframe to expand dfx to fill the day-count - then bind it to dfx
if(npad>0) {
lastdate= tail(Date,1)
lastdaterep= tail(dateRep,1)
dfappend= setNames(data.frame(matrix(0,ncol=ncol(dfx),nrow=npad)),names(dfx))
dfappend$Date= seq.Date(lastdate+1,to=lastdate+npad,by=1)
dfappend$dateRep= as.factor(lastdaterep)
dfappend$Country= setcountry1
dfx= rbind(dfx,dfappend)
z= maxdays
}
# now add a day-count and return the dataset, restricted by day=-count
dfx$dayCount= 1:z
subset(dfx,dayCount<=maxdays)
}
min= as.numeric(setmindeath)
maxdays= as.numeric(7*setmaxweeks)
dfx= subset(df0,Country==setcountry1)
dfx= dfx[order(dfx$Date),]
dfx$Weekday= weekdays(as.POSIXct(dfx$Date))
dfx$CasesFiltered= bwfilter(as.numeric(dfx$Cases), f=7, n=3, bandpass=F, from=.5)
dfx$DeathsFiltered= bwfilter(as.numeric(dfx$Deaths), f=7, n=3, bandpass=F, from=.5)
dfx$CasesSum= cumsum(dfx$Cases)
dfx$DeathsSum= cumsum(dfx$Deaths)
# use cumulative-deaths to restrict the dataset
dfx= subset(dfx,DeathsSum>=min)
npad= maxdays-nrow(dfx)
z=nrow(dfx)
npad
lastdate= tail(Date,1)
lastdaterep= tail(dateRep,1)
dfappend= setNames(data.frame(matrix(0,ncol=ncol(dfx),nrow=npad)),names(dfx))
dfappend$Date= seq.Date(lastdate+1,to=lastdate+npad,by=1)
dfappend$dateRep= as.factor(lastdaterep)
dfappend$Country= setcountry1
dfx
dfx= subset(df0,Country==setcountry1)
head(dfx)
dfx[order(dfx$Date),]
dfx= dfx[order(dfx$Date),]
dfx$Weekday= weekdays(as.POSIXct(dfx$Date))
head(dfx)
dfx$CasesFiltered= bwfilter(as.numeric(dfx$Cases), f=7, n=3, bandpass=F, from=.5)
dfx$DeathsFiltered= bwfilter(as.numeric(dfx$Deaths), f=7, n=3, bandpass=F, from=.5)
dfx$CasesSum= cumsum(dfx$Cases)
dfx$DeathsSum= cumsum(dfx$Deaths)
head(dfx)
dfx= subset(dfx,DeathsSum>=min)
npad= maxdays-nrow(dfx)
z=nrow(dfx)
head(dfx)
npad
lastdate= tail(Date,1)
lastdaterep= tail(dateRep,1)
df1 <- {
min= as.numeric(setmindeath)
maxdays= as.numeric(7*setmaxweeks)
dfx= subset(df0,Country==setcountry1)
dfx= dfx[order(dfx$Date),]
dfx$Weekday= weekdays(as.POSIXct(dfx$Date))
dfx$CasesFiltered= bwfilter(as.numeric(dfx$Cases), f=7, n=3, bandpass=F, from=.5)
dfx$DeathsFiltered= bwfilter(as.numeric(dfx$Deaths), f=7, n=3, bandpass=F, from=.5)
dfx$CasesSum= cumsum(dfx$Cases)
dfx$DeathsSum= cumsum(dfx$Deaths)
# use cumulative-deaths to restrict the dataset
dfx= subset(dfx,DeathsSum>=min)
npad= maxdays-nrow(dfx)
z=nrow(dfx)
# if necessary, build dataframe to expand dfx to fill the day-count - then bind it to dfx
if(npad>0) {
lastdate= tail(dfx$Date,1)
lastdaterep= tail(dfx$dateRep,1)
dfappend= setNames(data.frame(matrix(0,ncol=ncol(dfx),nrow=npad)),names(dfx))
dfappend$Date= seq.Date(lastdate+1,to=lastdate+npad,by=1)
dfappend$dateRep= as.factor(lastdaterep)
dfappend$Country= setcountry1
dfx= rbind(dfx,dfappend)
z= maxdays
}
# now add a day-count and return the dataset, restricted by day=-count
dfx$dayCount= 1:z
subset(dfx,dayCount<=maxdays)
}
head(df0)
dfx= subset(df0,Country==setcountry1)
dfx= dfx[order(dfx$Date),]
head(dfx)
tail(dfx)
min= as.numeric(setmindeath)
maxdays= as.numeric(7*setmaxweeks)
dfx= subset(df0,Country==setcountry1)
dfx= dfx[order(dfx$Date),]
dfx$Weekday= weekdays(as.POSIXct(dfx$Date))
dfx$CasesFiltered= bwfilter(as.numeric(dfx$Cases), f=7, n=3, bandpass=F, from=.5)
dfx$DeathsFiltered= bwfilter(as.numeric(dfx$Deaths), f=7, n=3, bandpass=F, from=.5)
dfx$CasesSum= cumsum(dfx$Cases)
dfx$DeathsSum= cumsum(dfx$Deaths)
# use cumulative-deaths to restrict the dataset
dfx= subset(dfx,DeathsSum>=min)
npad= maxdays-nrow(dfx)
z=nrow(dfx)
tail(dfx)
lastdate= tail(dfx$Date,1)
lastdaterep= tail(dfx$dateRep,1)
dfappend= setNames(data.frame(matrix(0,ncol=ncol(dfx),nrow=npad)),names(dfx))
dfappend$Date= seq.Date(lastdate+1,to=lastdate+npad,by=1)
dfappend$dateRep= as.factor(lastdaterep)
dfappend$Country= setcountry1
dfx= rbind(dfx,dfappend)
z= maxdays
tail(dfx)
dfx$dayCount= 1:z
subset(dfx,dayCount<=maxdays)
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
list.files()
list.files(pattern="*.csv")
runApp()
dyn.load("xfr_foo.so")
dyn.load("xfr_foo.so")
dyn.load("xfr_foo.so")
library(zoo) # for interpolation
install.packages("zoo")
library(zoo) # for interpolation
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
dyn.load("xf_filter_bworth1_d_R.so")
dyn.load("xf_filter_bworth1_d_R.so")
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
1:5
z=1:15
for i in z ; print i
set.seed(993)
x <- 1:300
y <- sin(x/20) + rnorm(300,sd=.1)
y[251:255] <- NA
y
plot(y)
plot(y,type="l")
rnorm(300)
rnorm(100)
plot(rnorm(100))
y
grid()
f21 <- rep(1/21,21)
filter(y, f21, sides=2)
f21 <- rep(1/21,21)
z=filter(y, f21, sides=2)
# Plot the unsmoothed data (gray)
plot(x, y, type="l", col=grey(.5))
# Draw gridlines
grid()
# Smoothed with lag:
# average of current sample and 19 previous samples (red)
f20 <- rep(1/20, 20)
f20
#>  [1] 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05
#> [18] 0.05 0.05 0.05
y_lag <- filter(y, f20, sides=1)
lines(x, y_lag, col="red")
# Smoothed symmetrically:
# average of current sample, 10 future samples, and 10 past samples (blue)
f21 <- rep(1/21,21)
f21
#>  [1] 0.04761905 0.04761905 0.04761905 0.04761905 0.04761905 0.04761905 0.04761905
#>  [8] 0.04761905 0.04761905 0.04761905 0.04761905 0.04761905 0.04761905 0.04761905
#> [15] 0.04761905 0.04761905 0.04761905 0.04761905 0.04761905 0.04761905 0.04761905
y_sym <- filter(y, f21, sides=2)
lines(x, y_sym, col="blue")
lines(x)
lines(x,y)
lines(x,y_sym)
# Plot the unsmoothed data (gray)
plot(x, y, type="l", col=grey(.5))
# Draw gridlines
grid()
# Smoothed with lag:
# average of current sample and 19 previous samples (red)
f20 <- rep(1/20, 20)
f20
#>  [1] 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05
#> [18] 0.05 0.05 0.05
y_lag <- filter(y, f20, sides=1)
lines(x, y_lag, col="red")
# Smoothed symmetrically:
# average of current sample, 10 future samples, and 10 past samples (blue)
f21 <- rep(1/21,21)
f21
#>  [1] 0.04761905 0.04761905 0.04761905 0.04761905 0.04761905 0.04761905 0.04761905
#>  [8] 0.04761905 0.04761905 0.04761905 0.04761905 0.04761905 0.04761905 0.04761905
#> [15] 0.04761905 0.04761905 0.04761905 0.04761905 0.04761905 0.04761905 0.04761905
y_sym <- filter(y, f21, sides=2)
lines(x, y_sym, col="blue")
runApp()
