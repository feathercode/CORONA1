gsub(a,"","-")
a
gsub(a," ","-")
gsub('-','',a)
paste("covid_",gsub('-','',(as.character(as.Date(head(dfx$dateRep,1),"%d/%m/%Y"))),".csv",sep="")
paste("covid_",gsub('-','',(as.character(as.Date(head(dfx$dateRep,1),"%d/%m/%Y"))),".csv",sep=""))
paste("covid_",gsub('-','',(as.character(as.Date(head(dfx$dateRep,1),"%d/%m/%Y"))),".csv",sep="")
paste("covid_",gsub('-','',as.character(as.Date(head(dfx$dateRep,1),"%d/%m/%Y"))),".csv",sep="")
outfile= paste("covid_",gsub('-','',as.character(as.Date(head(dfx$dateRep,1),"%d/%m/%Y"))),".csv",sep="")
list.files()
outfile
list.files()
write.table(dfx,file=outfile,sep=",")
list.files()
runApp('CORONA1.R')
runApp('CORONA1.R')
list.files(pattern="corona_*")
list.files(pattern="corona_*.csv")
glob2rx(pattern, trim.head = FALSE, trim.tail = TRUE)
glob2rx("corona*.csv", trim.head = FALSE, trim.tail = TRUE)
glob2rx(pattern, trim.head = FALSE, trim.tail = TRUE)
glob2rx("corona_*.csv", trim.head = FALSE, trim.tail = TRUE)
z=glob2rx("corona_*.csv", trim.head = FALSE, trim.tail = TRUE)
list.files(pattern=z)
runApp('CORONA1.R')
runApp('CORONA1.R')
runApp('CORONA1.R')
runApp('CORONA1.R')
runApp('CORONA1.R')
getwd()
runApp('CORONA1.R')
runApp('CORONA1.R')
runApp('CORONA1.R')
runApp('CORONA1.R')
runApp('CORONA1.R')
runApp('CORONA1.R')
runApp('CORONA1.R')
runApp('CORONA1.R')
s1="https://opendata.ecdc.europa.eu/covid19/casedistribution/csv"
dfx <- read.csv(s1, na.strings = "", fileEncoding = "UTF-8-BOM")
dfx <- read.csv(s1, na.strings = "", fileEncoding = "UTF-8-BOM")
dfx <- read.csv(s1, na.strings = "", fileEncoding = "UTF-8-BOM")
outfile= paste("corona_",gsub('-','',as.character(as.Date(head(dfx$dateRep,1),"%d/%m/%Y"))),".csv",sep="")
outfile
outfile
write.table(dfx,file=outfile,sep=",",row.names=F)
write.table(dfx,file=outfile,sep=",",row.names=F, fileEncoding = "UTF-8-BOM")
s1
?wget()
??wget()
download.file(s1,outfile)
download.file(s1,outfile,method=wget)
download.file(s1,outfile,method="wget")
download.file(s1,outfile)
runApp('CORONA1.R')
download.file(s1,outfile)
s1="https://opendata.ecdc.europa.eu/covid19/casedistribution/csv"
download.file(s1,"corona_temp.csv")
df <- read.csv(file="corona_temp.csv",nrows=1,header=T)
head(df)
df$dateRep[1]
outfile= paste("corona_",gsub('-','',as.character(as.Date(df$dateRep[1],"%d/%m/%Y"))),".csv",sep="")
outfile
runApp('CORONA1.R')
library(gridExtra) # for side-by-side ggplots
??grid.arrange()
runApp('CORONA1.R')
??grid.arrange()
runApp('CORONA1.R')
library(shiny); runApp('CORONA1.R')
library(shiny); runApp('CORONA1.R')
library(signal)
bf <- butter(3, 0.1)                        # 10 Hz low-pass filter
t <- seq(0, 1, len = 100)                   # 1 second sample
x <- sin(2*pi*t*2.3) + 0.25*rnorm(length(t))# 2.3 Hz sinusoid+noise
y <- filtfilt(bf, x)
z <- filter(bf, x) # apply filter
plot(t, x)
points(t, y, col="red")
points(t, z, col="blue")
legend("bottomleft", legend = c("data", "filtfilt", "filter"),
pch = 1, col = c("black", "red", "blue"), bty = "n")
plot(t, x)
line(t, y, col="red")
lines(t, y, col="red")
lines(t, z, col="blue")
plot(t, x, type="l")
lines(t, z, col="blue")
lines(t, y, col="red")
x <- sin(2*pi*t*2.3) + 0.25*rnorm(length(t))# 2.3 Hz sinusoid+noise
bf <- butter(3, 0.1)                        # 10 Hz low-pass filter
t <- seq(0, 1, len = 100)                   # 1 second sample
y <- filtfilt(bf, x)
z <- filter(bf, x) # apply filter
plot(t, x)
lines(t, y, col="red")
lines(t, z, col="blue")
legend("bottomleft", legend = c("data", "filtfilt", "filter"),
pch = 1, col = c("black", "red", "blue"), bty = "n")
filtfilt()
butter()
t <- seq(0, 1, len = 100)                   # 1 second sample
x <- sin(2*pi*t*2.3) + 0.25*rnorm(length(t))# 2.3 Hz sinusoid+noise
bf <- butter(3,.10,type="low")  # define 3-pole,10 Hz, low-pass filter
y <- filtfilt(bf, x)
plot(t, x)
lines(t, y, col="red")
lines(t, z, col="blue")
legend("bottomleft", legend = c("data", "filtfilt", "filter"),
pch = 1, col = c("black", "red", "blue"), bty = "n")
plot(t, x, type="l")
lines(t, y, col="red")
lines(t, z, col="blue")
legend("bottomleft", legend = c("data", "filtfilt", "filter"),
pch = 1, col = c("black", "red", "blue"), bty = "n")
bf <- butter(3,.10,type="high")
y <- filtfilt(bf, x)
plot(t, x, type="l")
lines(t, y, col="red")
lines(t, z, col="blue")
legend("bottomleft", legend = c("data", "filtfilt", "filter"),
pch = 1, col = c("black", "red", "blue"), bty = "n")
bf <- butter(3,1,type="high")
y <- filtfilt(bf, x)
plot(t, x, type="l")
lines(t, y, col="red")
lines(t, z, col="blue")
legend("bottomleft", legend = c("data", "filtfilt", "filter"),
pch = 1, col = c("black", "red", "blue"), bty = "n")
bf <- butter(3,.2,type="high")
y <- filtfilt(bf, x)
plot(t, x, type="l")
lines(t, y, col="red")
lines(t, z, col="blue")
legend("bottomleft", legend = c("data", "filtfilt", "filter"),
pch = 1, col = c("black", "red", "blue"), bty = "n")
bf <- butter(3,.1,type="high")
y <- filtfilt(bf, x)
plot(t, x, type="l")
lines(t, y, col="red")
lines(t, z, col="blue")
legend("bottomleft", legend = c("data", "filtfilt", "filter"),
pch = 1, col = c("black", "red", "blue"), bty = "n")
bf <- butter(3,.1,type="low")
y <- filtfilt(bf, x)
plot(t, x, type="l")
lines(t, y, col="red")
lines(t, z, col="blue")
legend("bottomleft", legend = c("data", "filtfilt", "filter"),
pch = 1, col = c("black", "red", "blue"), bty = "n")
y <- filtfilt(bf, x)
plot(t, x, type="l")
lines(t, y, col="red")
legend("bottomleft", legend = c("data", "filtfilt", "filter"),
pch = 1, col = c("black", "red", "blue"), bty = "n")
bf <- butter(3,.5,type="low")
y <- filtfilt(bf, x)
plot(t, x, type="l")
lines(t, y, col="red")
legend("bottomleft", legend = c("data", "filtfilt", "filter"),
pch = 1, col = c("black", "red", "blue"), bty = "n")
bf <- butter(3,1,type="low")
y <- filtfilt(bf, x)
plot(t, x, type="l")
lines(t, y, col="red")
legend("bottomleft", legend = c("data", "filtfilt", "filter"),
pch = 1, col = c("black", "red", "blue"), bty = "n")
bf <- butter(3,10,type="low")
bf <- butter(3,2,type="low")
bf <- butter(3,2,type="high")
bf <- butter(3,.1,type="high")
bf <- butter(3,2,type="high")
bf <- butter(3,.1,type="high")
y <- filtfilt(bf, x)
plot(t, x, type="l")
lines(t, y, col="red")
legend("bottomleft", legend = c("data", "filtfilt", "filter"),
pch = 1, col = c("black", "red", "blue"), bty = "n")
bf <- butter(3,.10,type="low")  # define 3-pole,10 Hz, low-pass filter
??filtfilt()
sf = 800; sf2 = sf/2;
data=[[1;zeros(sf-1,1)],sinetone(25,sf,1,1),sinetone(50,sf,1,1),sinetone(100,sf,1,1)];
[b,a]=butter ( 1, 50 / sf2 );
filtered = filter(b,a,data);
clf
subplot ( columns ( filtered ), 1, 1)
plot(filtered(:,1),";Impulse response;")
subplot ( columns ( filtered ), 1, 2 )
plot(filtered(:,2),";25Hz response;")
subplot ( columns ( filtered ), 1, 3 )
plot(filtered(:,3),";50Hz response;")
subplot ( columns ( filtered ), 1, 4 )
plot(filtered(:,4),";100Hz response;")
sf= 100
t=  seq(0, 1, len=sf)                         # 1 second sample, 100Hz
x <- sin(2*pi*t*2.3) + 0.25*rnorm(length(t))  # 2.3 Hz sinusoid+noise
bf <- butter(3,(10/(sf/2)),type="low")        # define 3-pole,10 Hz, low-pass filter
y <- filtfilt(bf, x)
plot(t, x, type="l")
lines(t, y, col="red")
legend("bottomleft", legend = c("data", "filtfilt", "filter"),
pch = 1, col = c("black", "red", "blue"), bty = "n")
ff= 10  # filter frequency
bf <- butter(3,(10/(sf/2)),type="low")        # define 3-pole,10 Hz, low-pass filter
y <- filtfilt(bf, x)
plot(t, x, type="l")
lines(t, y, col="red")
legend("bottomleft", legend = c("data", "filtfilt", "filter"),
pch = 1, col = c("black", "red", "blue"), bty = "n")
bf <- butter(3,(10/(sf/2)),type="low")        # define 3-pole,10 Hz, low-pass filter
y <- filtfilt(bf, x)
plot(t, x, type="l")
lines(t, y, col="red")
legend("bottomleft", legend = c("data", "filtfilt", "filter"),
pch = 1, col = c("black", "red", "blue"), bty = "n")
ff= 2  # filter frequency
bf <- butter(3,(10/(sf/2)),type="low")        # define 3-pole,10 Hz, low-pass filter
y <- filtfilt(bf, x)
plot(t, x, type="l")
lines(t, y, col="red")
legend("bottomleft", legend = c("data", "filtfilt", "filter"),
pch = 1, col = c("black", "red", "blue"), bty = "n")
bf <- butter(3,(ff/(sf/2)),type="low")        # define 3-pole,10 Hz, low-pass filter
y <- filtfilt(bf, x)
plot(t, x, type="l")
lines(t, y, col="red")
legend("bottomleft", legend = c("data", "filtfilt", "filter"),
pch = 1, col = c("black", "red", "blue"), bty = "n")
ff= 2.5  # filter frequency
bf <- butter(3,(ff/(sf/2)),type="low")        # define 3-pole,10 Hz, low-pass filter
y <- filtfilt(bf, x)
plot(t, x, type="l")
lines(t, y, col="red")
legend("bottomleft", legend = c("data", "filtfilt", "filter"),
pch = 1, col = c("black", "red", "blue"), bty = "n")
runApp('CORONA1.R')
runApp('CORONA1.R')
runApp('CORONA1.R')
library(shiny); runApp('CORONA1.R')
install.packages("RcppRoll")
x
t
y
sf= 100 # sample frequency
ff= 10  # filter frequency
t=  seq(0, 1, len=sf)                         # 1 second sample, 100Hz
x <- sin(2*pi*t*2.3) + 0.25*rnorm(length(t))  # 2.3 Hz sinusoid+noise
x
plot(x)
plot(x,t="l")
rollmean(x,10,align="center")
y=rollmean(x,10,align="center")
plot(y,t="l")
plot(y,t="l")
lines(x)
y=rollmean(x,10,align="left")
plot(y,t="l")
lines(x)
y=rollmean(x,10,align="right")
plot(y,t="l"); lines(x)
plot(y,t="l",c="red"); lines(x)
plot(y,t="l",color="red"); lines(x)
plot(y,t="l",ct="red"); lines(x)
plot(y,t="l",col="red"); lines(x)
y=rollmean(x,5,align="right") ; plot(y,t="l",col="red"); lines(x)
y=rollmean(x,20,align="right") ; plot(y,t="l",col="red"); lines(x)
y=rollmean(x,20,align="left") ; plot(y,t="l",col="red"); lines(x)
y=rollmean(x,20,align="right") ; plot(y,t="l",col="red"); lines(x)
y=rollmean(x,20,align=c("left") ; plot(y,t="l",col="red"); lines(x)
y=rollmean(x,20,align=c("left")) ; plot(y,t="l",col="red"); lines(x)
y=rollmean(x,20,align=c("center")) ; plot(y,t="l",col="red"); lines(x)
y=rollmean(x,20,align=c("centr")) ; plot(y,t="l",col="red"); lines(x)
y=rollmean(x,20,align=c("center")) ; plot(y,t="l",col="red"); lines(x)
y=rollmean(x,20,align=c("center")) ; plot(x,t="l",col="red"); lines(y)
y=rollmean(x,20) ; plot(x,t="l",col="red"); lines(y)
y=rollmean(x,20,align=c("center"),fill=c(1,1,1)) ; plot(x,t="l",col="red"); lines(y)
library(RcppRoll)
y= roll_mean(x,20,align=c("center"))
y= roll_mean(x,20,align=c("center")) ; plot(x,t="l",col="red"); lines(y)
y= roll_mean(x,20,align=c("right")) ; plot(x,t="l",col="red"); lines(y)
y= roll_mean(x,20,align=c("center")) ; plot(x,t="l",col="red"); lines(y)
y= roll_mean(x,20,align=c("center")) ; plot(x,t="l",col="red"); lines(y,col="blue")
y= roll_mean(x,20,align=c("center")) ; plot(x,t="l",col="red"); lines(y,col="blue")
x[1]
x[length(x)]
x
x[length(x)]
fill=c(x[1],0,x[length(x)])
y=rollmean(x,20,align=c("center"),fill=c(1,1,1)) ; plot(x,t="l",col="red"); lines(y)
fill=c(x[1],0,x[length(x)])
y=rollmean(x,20,align=c("center"),fill=fill)) ; plot(x,t="l",col="red"); lines(y)
f=c(x[1],0,x[length(x)])
y=rollmean(x,20,align=c("center"),fill=c(1,1,1)) ; plot(x,t="l",col="red"); lines(y)
f=c(x[1],0,x[length(x)])
y=rollmean(x,20,align=c("center"),fill=f) ; plot(x,t="l",col="red"); lines(y)
f=c(x[20],0,x[length(x)-20])
y=rollmean(x,20,align=c("center"),fill=f) ; plot(x,t="l",col="red"); lines(y)
f=c(x[10],0,x[length(x)-20])
y=rollmean(x,20,align=c("center"),fill=f) ; plot(x,t="l",col="red"); lines(y)
f=c(x[11],0,x[length(x)-20])
y=rollmean(x,20,align=c("center"),fill=f) ; plot(x,t="l",col="red"); lines(y)
f=c(x[10],0,x[length(x)-10])
y=rollmean(x,20,align=c("center"),fill=f) ; plot(x,t="l",col="red"); lines(y)
f=c(x[10],0,x[length(x)-11])
y=rollmean(x,20,align=c("center"),fill=f) ; plot(x,t="l",col="red"); lines(y)
f=c(x[10],0,x[length(x)-12])
y=rollmean(x,20,align=c("center"),fill=f) ; plot(x,t="l",col="red"); lines(y)
f=c(x[10],0,x[length(x)-9])
y=rollmean(x,20,align=c("center"),fill=f) ; plot(x,t="l",col="red"); lines(y)
f=c(x[10],0,x[length(x)-10])
y=rollmean(x,20,align=c("center"),fill=f) ; plot(x,t="l",col="red"); lines(y)
w1=20
w2=w/2
f=c(x[w2],0,x[length(x)-w2])
y=rollmean(x,20,align=c("center"),fill=f) ; plot(x,t="l",col="red"); lines(y)
w1=20
w2=w1/2
f=c(x[w2],0,x[length(x)-w2])
y=rollmean(x,w1,align=c("center"),fill=f) ; plot(x,t="l",col="red"); lines(y)
y= roll_mean(x,w1,align=c("center"),fill=f) ; plot(x,t="l",col="red"); lines(y)
w1=20
w2=w1/2
f=c(x[w2],0,x[length(x)-w2])
y=rollmean(x,w1,align=c("center"),fill=f) ; plot(x,t="l",col="red"); lines(y)
w1=20
w2=w1/2
f=c(x[w2],0,x[length(x)-w2])
y=rollmean(x,w1,align=c("center"),fill=f) ; plot(x,t="l",col="red"); lines(y,col="blue")
y= roll_mean(x,w1,align=c("center"),fill=f) ; plot(x,t="l",col="red"); lines(y)
w1=20
w2=w1/2
f=c(x[w2],0,x[length(x)-w2])
y=rollmean(x,w1,align=c("center"),fill=f) ; plot(x,t="l",col="red"); lines(y,col="blue")
runApp('CORONA1.R')
runApp('CORONA1.R')
roll_
?filtfilt()
library(zoo)
y=rollmean(x,w1,align=c("center"),fill=c("NA","NA","NA")
plot(x,t="l",col="red"); lines(y)
library(zoo)
y=rollmean(x,w1,align=c("center"),fill=c("NA","NA","NA")
plot(x,t="l",col="red"); lines(y)
y=rollmean(x,w1,align=c("center"),fill=c("NA","NA","NA")
y=rollmean(x,w1,align=c("center"),fill=c("NA","NA","NA")
plot(x,t="l",col="red"); lines(y)
y=rollmean(x,w1,align=c("center"),fill=c("NA","NA","NA"))
plot(x,t="l",col="red"); lines(y)
y=rollmean(x,w1,align=c("center"),fill=c("NA","NA","NA"))
y= na.fill(y, "extend")
plot(x,t="l",col="red"); lines(y)
bf <- butter(3,(10/(sf/2)),type="low")        # define 3-pole,10 Hz, low-pass filter
y <- filtfilt(bf, x)
plot(t, x, type="l")
lines(t, y, col="red")
legend("bottomleft", legend = c("data", "filtfilt", "filter"),
pch = 1, col = c("black", "red", "blue"), bty = "n")
library(signal)
bf <- butter(3,(10/(sf/2)),type="low")        # define 3-pole,10 Hz, low-pass filter
y <- filtfilt(bf, x)
plot(t, x, type="l")
lines(t, y, col="red")
legend("bottomleft", legend = c("data", "filtfilt", "filter"),
pch = 1, col = c("black", "red", "blue"), bty = "n")
sf= 100 # sample frequency
ff= 10  # filter frequency
t=  seq(0, 1, len=sf)                         # 1 second sample, 100Hz
x <- cos(2*pi*t*2.3) + 0.25*rnorm(length(t))  # 2.3 Hz sinusoid+noise
library(signal)
bf <- butter(3,(10/(sf/2)),type="low")        # define 3-pole,10 Hz, low-pass filter
y <- filtfilt(bf, x)
plot(t, x, type="l")
lines(t, y, col="red")
legend("bottomleft", legend = c("data", "filtfilt", "filter"),
pch = 1, col = c("black", "red", "blue"), bty = "n")
sf= 100 # sample frequency
ff= 10  # filter frequency
t=  seq(0, 10, len=1000)                       # 10 second sample, 100Hz
x <- sin(2*pi*t*2.3) + 0.25*rnorm(length(t))  # 2.3 Hz sinusoid+noise
bf <- butter(3,(10/(sf/2)),type="low")        # define 3-pole,10 Hz, low-pass filter
y <- filtfilt(bf, x)
plot(t, x, type="l")
lines(t, y, col="red")
legend("bottomleft", legend = c("data", "filtfilt", "filter"),
pch = 1, col = c("black", "red", "blue"), bty = "n")
library(signal)
sf= 100 # sample frequency
ff= 10  # filter frequency
t=  seq(0, 5, len=500)                        # 5 second sample, 100Hz
x <- sin(2*pi*t*2.3) + 0.25*rnorm(length(t))  # 2.3 Hz sinusoid+noise
bf <- butter(3,(10/(sf/2)),type="low")        # define 3-pole,10 Hz, low-pass filter
y <- filtfilt(bf, x)
plot(t, x, type="l")
lines(t, y, col="red")
legend("bottomleft", legend = c("data", "filtfilt", "filter"),
pch = 1, col = c("black", "red", "blue"), bty = "n")
t=  seq(0, 2, len=500)                        # 2 second sample, 100Hz
x <- sin(2*pi*t*2.3) + 0.25*rnorm(length(t))  # 2.3 Hz sinusoid+noise
bf <- butter(3,(10/(sf/2)),type="low")        # define 3-pole,10 Hz, low-pass filter
y <- filtfilt(bf, x)
plot(t, x, type="l")
lines(t, y, col="red")
legend("bottomleft", legend = c("data", "filtfilt", "filter"),
pch = 1, col = c("black", "red", "blue"), bty = "n")
# apply a bidirectional Butterworth filter ---------------------------
# NOTE: both the {signal} and {seewave} library implimentations seem to "roll off" towards zero at the end of the dataset
library(signal)
sf= 100 # sample frequency
ff= 10  # filter frequency
t=  seq(0, 2, len=500)                        # 2 second sample, 100Hz
x <- sin(2*pi*t*2.3) + 0.25*rnorm(length(t))  # 2.3 Hz sinusoid+noise
bf <- butter(3,(10/(sf/2)),type="low")        # define 3-pole,10 Hz, low-pass filter
y <- filtfilt(bf, x)
plot(t, x, type="l")
lines(t, y, col="red")
legend("bottomleft", legend = c("data", "filtfilt"),
pch = 1, col = c("black", "red"), bty = "n")
# apply a bidirectional Butterworth filter ---------------------------
# NOTE: both the {signal} and {seewave} library implimentations seem to "roll off" towards zero at the end of the dataset
library(signal)
sf= 100 # sample frequency
ff= 5  # filter frequency
t=  seq(0, 2, len=500)                        # 2 second sample, 100Hz
x <- sin(2*pi*t*2.3) + 0.25*rnorm(length(t))  # 2.3 Hz sinusoid+noise
bf <- butter(3,(10/(sf/2)),type="low")        # define 3-pole,10 Hz, low-pass filter
y <- filtfilt(bf, x)
plot(t, x, type="l")
lines(t, y, col="red")
legend("bottomleft", legend = c("data", "filtfilt"),
pch = 1, col = c("black", "red"), bty = "n")
# apply a bidirectional Butterworth filter ---------------------------
# NOTE: both the {signal} and {seewave} library implimentations seem to "roll off" towards zero at the end of the dataset
library(signal)
sf= 100 # sample frequency
ff= 1  # filter frequency
t=  seq(0, 2, len=500)                        # 2 second sample, 100Hz
x <- sin(2*pi*t*2.3) + 0.25*rnorm(length(t))  # 2.3 Hz sinusoid+noise
bf <- butter(3,(10/(sf/2)),type="low")        # define 3-pole,10 Hz, low-pass filter
y <- filtfilt(bf, x)
plot(t, x, type="l")
lines(t, y, col="red")
legend("bottomleft", legend = c("data", "filtfilt"),
pch = 1, col = c("black", "red"), bty = "n")
# apply a bidirectional Butterworth filter ---------------------------
# NOTE: both the {signal} and {seewave} library implimentations seem to "roll off" towards zero at the end of the dataset
library(signal)
sf= 100 # sample frequency
ff= .5  # filter frequency
t=  seq(0, 2, len=500)                        # 2 second sample, 100Hz
x <- sin(2*pi*t*2.3) + 0.25*rnorm(length(t))  # 2.3 Hz sinusoid+noise
bf <- butter(3,(10/(sf/2)),type="low")        # define 3-pole,10 Hz, low-pass filter
y <- filtfilt(bf, x)
plot(t, x, type="l")
lines(t, y, col="red")
legend("bottomleft", legend = c("data", "filtfilt"),
pch = 1, col = c("black", "red"), bty = "n")
# apply a bidirectional Butterworth filter ---------------------------
# NOTE: both the {signal} and {seewave} library implimentations seem to "roll off" towards zero at the end of the dataset
library(signal)
sf= 100 # sample frequency
ff= .5  # filter frequency
t=  seq(0, 2, len=500)                        # 2 second sample, 100Hz
x <- sin(2*pi*t*2.3) + 0.25*rnorm(length(t))  # 2.3 Hz sinusoid+noise
bf <- butter(3,(10/(sf/2)),type="low")        # define 3-pole,10 Hz, low-pass filter
y <- filtfilt(bf, x)
plot(t, x, type="l")
lines(t, y, col="red")
legend("bottomleft", legend = c("data", "filtfilt"),
pch = 1, col = c("black", "red"), bty = "n")
# apply a bidirectional Butterworth filter ---------------------------
# NOTE: both the {signal} and {seewave} library implimentations seem to "roll off" towards zero at the end of the dataset
library(signal)
sf= 100 # sample frequency
ff= .5  # filter frequency
t=  seq(0, 2, len=500)                        # 2 second sample, 100Hz
x <- sin(2*pi*t*2.3) + 0.25*rnorm(length(t))  # 2.3 Hz sinusoid+noise
bf <- butter(3,(ff/(sf/2)),type="low")        # define 3-pole,10 Hz, low-pass filter
y <- filtfilt(bf, x)
plot(t, x, type="l")
lines(t, y, col="red")
legend("bottomleft", legend = c("data", "filtfilt"),
pch = 1, col = c("black", "red"), bty = "n")
# apply a bidirectional Butterworth filter ---------------------------
# NOTE: both the {signal} and {seewave} library implimentations seem to "roll off" towards zero at the end of the dataset
library(signal)
sf= 100 # sample frequency
ff= 2  # filter frequency
t=  seq(0, 2, len=500)                        # 2 second sample, 100Hz
x <- sin(2*pi*t*2.3) + 0.25*rnorm(length(t))  # 2.3 Hz sinusoid+noise
bf <- butter(3,(ff/(sf/2)),type="low")        # define 3-pole,10 Hz, low-pass filter
y <- filtfilt(bf, x)
plot(t, x, type="l")
lines(t, y, col="red")
legend("bottomleft", legend = c("data", "filtfilt"),
pch = 1, col = c("black", "red"), bty = "n")
# apply a bidirectional Butterworth filter ---------------------------
# NOTE: both the {signal} and {seewave} library implimentations seem to "roll off" towards zero at the end of the dataset
library(signal)
sf= 100 # sample frequency
ff= 2  # filter frequency
t=  seq(0, 5, len=500)                        # 2 second sample, 100Hz
x <- sin(2*pi*t*2.3) + 0.25*rnorm(length(t))  # 2.3 Hz sinusoid+noise
bf <- butter(3,(ff/(sf/2)),type="low")        # define 3-pole,10 Hz, low-pass filter
y <- filtfilt(bf, x)
plot(t, x, type="l")
lines(t, y, col="red")
legend("bottomleft", legend = c("data", "filtfilt"),
pch = 1, col = c("black", "red"), bty = "n")
library(shiny); runApp('CORONA1.R')
install.packages("shinydashboard")
runApp('CORONA1.R')
library(shiny); runApp('CORONA1.R')
